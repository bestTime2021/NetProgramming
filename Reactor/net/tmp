int Tcp_listen(const char *hostname, const char *service, socklen_t *addrlenp) {
	int listenfd, n;
	struct addrinfo hints, *res, *ressave;
	memset(&hints, 0, sizeof(hints));
	hints.ai_flags = AI_PASSIVE;
	hints.ai_family = AF_INET; //FIXME AF_UNSPEC
	hints.ai_socktype = SOCK_STREAM;

	//FIXME
	if ( (n =getaddrinfo(NULL, service, &hints, &res)) != 0)
		printf("getaddrinfo() error: %s", gai_strerror(n)), exit(0);

	ressave = res;
	assert(res != NULL);
	do {
		listenfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
		
		if (listenfd < 0)
			continue;
		Set_REUSEADDR(listenfd);
		if (bind(listenfd, res->ai_addr, res->ai_addrlen) == 0)
			break;
		Close(listenfd);
		res = res->ai_next;
	} while (res != NULL);

	if (res == NULL)
		app_error("Tcp_listen() error, maybe bind() error");

	if (addrlenp)
		*addrlenp = res->ai_addrlen;
	Listen(listenfd, 5);

	freeaddrinfo(ressave);
	return listenfd;
}
